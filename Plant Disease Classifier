{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":182633,"sourceType":"datasetVersion","datasetId":78313}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Objective: Create model that successfuly identifies plant diseases using torch (I have not used torch before)\n# Roadmap\n    # 1. Data Exploration \n        # a. Identify diseases \n        # b. Example photos \n    # 2. Transfer Learning using efficentnet \n    # 3. Create Custom Model that utilizes GLCM feature extraction ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:38:40.417044Z","iopub.execute_input":"2025-01-19T04:38:40.417350Z","iopub.status.idle":"2025-01-19T04:38:40.421008Z","shell.execute_reply.started":"2025-01-19T04:38:40.417326Z","shell.execute_reply":"2025-01-19T04:38:40.420141Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# imports \nimport pandas as pd \nimport seaborn as sns \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport cv2 \nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision.transforms import v2\nfrom torchvision.models import resnet50\nfrom torch.optim import Adam\nfrom PIL import Image\n\nimport torchvision\nfrom torch.utils.data import DataLoader\nfrom torchvision import transforms, datasets\nfrom torchvision.models import efficientnet_v2_s, EfficientNet_V2_S_Weights\nimport os \nfrom pathlib import Path","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:38:42.036419Z","iopub.execute_input":"2025-01-19T04:38:42.036732Z","iopub.status.idle":"2025-01-19T04:38:48.799690Z","shell.execute_reply.started":"2025-01-19T04:38:42.036704Z","shell.execute_reply":"2025-01-19T04:38:48.799002Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"try:\n    from torchinfo import summary\n    print(\"[INFO] torchinfo imported successfully\")\nexcept:\n    print(\"[INFO] Could not find torchinfo. Installing it.\")\n    !pip install -q torchinfo\n    from torchinfo import summary\n    print(\"[INFO] torchinfo installed and imported successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:05.581502Z","iopub.execute_input":"2025-01-19T04:39:05.582016Z","iopub.status.idle":"2025-01-19T04:39:05.602649Z","shell.execute_reply.started":"2025-01-19T04:39:05.581983Z","shell.execute_reply":"2025-01-19T04:39:05.601943Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:06.631729Z","iopub.execute_input":"2025-01-19T04:39:06.632105Z","iopub.status.idle":"2025-01-19T04:39:06.682346Z","shell.execute_reply.started":"2025-01-19T04:39:06.632071Z","shell.execute_reply":"2025-01-19T04:39:06.681449Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ds_path = Path(\"/kaggle/input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)\")\ntest_path = Path(\"/kaggle/input/new-plant-diseases-dataset/test/test\")\n\ntrain_path = ds_path / \"train\"\nval_path = ds_path / \"valid\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:09.278375Z","iopub.execute_input":"2025-01-19T04:39:09.278789Z","iopub.status.idle":"2025-01-19T04:39:09.283223Z","shell.execute_reply.started":"2025-01-19T04:39:09.278755Z","shell.execute_reply":"2025-01-19T04:39:09.282234Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# START STEP 1 \ntotal_class_train = len(os.listdir(train_path))\ntotal_class_val = len(os.listdir(val_path))\ntotal_test = len(os.listdir(test_path))\n\nprint(f\"Total of Train Data Classes: {total_class_train} classes\")\nprint(f\"Total of Validation Data Classes: {total_class_val} classes\")\nprint(f\"Total of Test Data: {total_test} images\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:10.766355Z","iopub.execute_input":"2025-01-19T04:39:10.766644Z","iopub.status.idle":"2025-01-19T04:39:10.795678Z","shell.execute_reply.started":"2025-01-19T04:39:10.766622Z","shell.execute_reply":"2025-01-19T04:39:10.794826Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# count number of each class in the training and validation data \n\ndef count_classes(path): \n    classes = sorted(os.listdir(path))\n    cls_count = {}\n    for cls in classes:\n        class_path = os.path.join(path, cls)\n        cls_count[cls] = len(os.listdir(class_path))\n    return cls_count","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:13.661256Z","iopub.execute_input":"2025-01-19T04:39:13.661561Z","iopub.status.idle":"2025-01-19T04:39:13.665723Z","shell.execute_reply.started":"2025-01-19T04:39:13.661536Z","shell.execute_reply":"2025-01-19T04:39:13.664861Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_cc = count_classes(train_path)\nval_cc = count_classes(val_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:14.604602Z","iopub.execute_input":"2025-01-19T04:39:14.604949Z","iopub.status.idle":"2025-01-19T04:39:24.762222Z","shell.execute_reply.started":"2025-01-19T04:39:14.604895Z","shell.execute_reply":"2025-01-19T04:39:24.761306Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_counts_df = pd.DataFrame.from_dict(train_cc, orient=\"index\", columns=[\"Count\"])\nval_counts_df = pd.DataFrame.from_dict(val_cc, orient=\"index\", columns=[\"Count\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:57.966648Z","iopub.execute_input":"2025-01-19T04:39:57.966988Z","iopub.status.idle":"2025-01-19T04:39:57.973296Z","shell.execute_reply.started":"2025-01-19T04:39:57.966955Z","shell.execute_reply":"2025-01-19T04:39:57.972278Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 1a \ntrain_counts_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:39:58.962888Z","iopub.execute_input":"2025-01-19T04:39:58.963247Z","iopub.status.idle":"2025-01-19T04:39:58.982446Z","shell.execute_reply.started":"2025-01-19T04:39:58.963218Z","shell.execute_reply":"2025-01-19T04:39:58.981778Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"val_counts_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:40:01.803260Z","iopub.execute_input":"2025-01-19T04:40:01.803560Z","iopub.status.idle":"2025-01-19T04:40:01.811845Z","shell.execute_reply.started":"2025-01-19T04:40:01.803537Z","shell.execute_reply":"2025-01-19T04:40:01.810998Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 1b \nimport random\n\nimages = list(ds_path.glob(\"*/*/*.jpg\"))\n\nrandom_images = random.sample(images, 10)\n\n\nfig, axes = plt.subplots(nrows=5, ncols=2, figsize=(10,20))\n\nfor i, ax in enumerate(axes.flat): \n    img_path = random_images[i]\n    img_class = img_path.parent.stem\n    img = Image.open(img_path)\n    ax.imshow(img)\n    ax.set_title(f\"Label: {img_class}\\nShape: {img.height}x{img.width}x{3 if img.mode == 'RGB' else 1}\")\n    ax.axis(\"off\") \n    \n\nplt.show()\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:40:12.035750Z","iopub.execute_input":"2025-01-19T04:40:12.036113Z","iopub.status.idle":"2025-01-19T04:40:13.432572Z","shell.execute_reply.started":"2025-01-19T04:40:12.036082Z","shell.execute_reply":"2025-01-19T04:40:13.431509Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#2 Transfer learning using efficent net\n\ntrain_transforms = v2.Compose([\n    v2.Resize(size=(242,242)),\n    v2.RandomRotation(45),\n    v2.ToDtype(torch.float32, scale=True),\n    v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n])\n\nval_transforms = v2.Compose([\n    v2.Resize(size=(242,242)),\n    v2.ToDtype(torch.float32, scale=True),\n    v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:42:16.942362Z","iopub.execute_input":"2025-01-19T04:42:16.942665Z","iopub.status.idle":"2025-01-19T04:42:16.948363Z","shell.execute_reply.started":"2025-01-19T04:42:16.942641Z","shell.execute_reply":"2025-01-19T04:42:16.947572Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"training_data = datasets.ImageFolder(root=train_path, transform=train_transforms)\nvalidation_data = datasets.ImageFolder(root=val_path, transform=val_transforms)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:47:26.043489Z","iopub.execute_input":"2025-01-19T04:47:26.043842Z","iopub.status.idle":"2025-01-19T04:49:06.237971Z","shell.execute_reply.started":"2025-01-19T04:47:26.043813Z","shell.execute_reply":"2025-01-19T04:49:06.237012Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"training_data.classes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:55:37.071832Z","iopub.execute_input":"2025-01-19T04:55:37.072227Z","iopub.status.idle":"2025-01-19T04:55:37.077641Z","shell.execute_reply.started":"2025-01-19T04:55:37.072196Z","shell.execute_reply":"2025-01-19T04:55:37.076864Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_dataloader = DataLoader(training_data,\n                                  batch_size=64,\n                                  num_workers=2,\n                                  shuffle=True)\n\nval_dataloader = DataLoader(validation_data,\n                                batch_size=64,\n                                num_workers=2,\n                                shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:56:58.120384Z","iopub.execute_input":"2025-01-19T04:56:58.120725Z","iopub.status.idle":"2025-01-19T04:56:58.125240Z","shell.execute_reply.started":"2025-01-19T04:56:58.120699Z","shell.execute_reply":"2025-01-19T04:56:58.124311Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(f\"Number of Training Batches: {len(train_dataloader)}\")\nprint(f\"Number of Validation Batches: {len(val_dataloader)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T04:58:37.529655Z","iopub.execute_input":"2025-01-19T04:58:37.529966Z","iopub.status.idle":"2025-01-19T04:58:37.534620Z","shell.execute_reply.started":"2025-01-19T04:58:37.529942Z","shell.execute_reply":"2025-01-19T04:58:37.533772Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"efficient_net_model = efficientnet_v2_s(weights=EfficientNet_V2_S_Weights.DEFAULT)\n\nefficient_net_model.classifier = nn.Sequential(nn.Linear(in_features=1280, out_features=38))\n\nfor param in efficient_net_model.parameters():\n    param.requires_grad = False\n\nfor param in efficient_net_model.classifier.parameters():\n    param.requires_grad = True\n\nefficient_net_model = efficient_net_model.to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T05:03:33.387339Z","iopub.execute_input":"2025-01-19T05:03:33.387663Z","iopub.status.idle":"2025-01-19T05:03:34.014488Z","shell.execute_reply.started":"2025-01-19T05:03:33.387633Z","shell.execute_reply":"2025-01-19T05:03:34.013737Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"summary(model=efficient_net_model,\n        input_size=(32, 3, 224, 224),\n        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n        col_width=20,\n        row_settings=[\"var_names\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T05:04:04.207768Z","iopub.execute_input":"2025-01-19T05:04:04.208109Z","iopub.status.idle":"2025-01-19T05:04:05.035596Z","shell.execute_reply.started":"2025-01-19T05:04:04.208082Z","shell.execute_reply":"2025-01-19T05:04:05.034703Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"loss_fn = nn.CrossEntropyLoss()\n\noptim_efficient = Adam(params=efficient_net_model.parameters(), lr=0.001)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T05:04:55.076233Z","iopub.execute_input":"2025-01-19T05:04:55.076645Z","iopub.status.idle":"2025-01-19T05:04:55.082652Z","shell.execute_reply.started":"2025-01-19T05:04:55.076612Z","shell.execute_reply":"2025-01-19T05:04:55.081725Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def train(model: torch.nn.Module, \n          dataloader: torch.utils.data.DataLoader,\n          loss_fn: torch.nn.Module,\n          optimizer: torch.optim.Optimizer):\n    \n    model.train()\n    \n    train_accuracy, train_loss = 0, 0\n\n    for batch, (X,y) in enumerate(dataloader): \n        X, y = X.to(device), y.to(device)\n\n        y_pred = model(X)\n\n        loss = loss_fn(y_pred, y)\n        train_loss += loss.item()\n\n        optimizer.zero_grad()\n\n        loss.backward()\n\n        optimizer.step()\n\n        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n\n        train_accuracy += (y_pred_class == y).sum().item()/len(y_pred)\n        \n    train_loss = train_loss / len(dataloader)\n    train_accuracy = train_accuracy / len(dataloader)\n\n    return train_loss, train_accuracy\n\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T05:19:48.201380Z","iopub.execute_input":"2025-01-19T05:19:48.201723Z","iopub.status.idle":"2025-01-19T05:19:48.207518Z","shell.execute_reply.started":"2025-01-19T05:19:48.201693Z","shell.execute_reply":"2025-01-19T05:19:48.206614Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}